-- Tạo các bảng duy trì dữ liệu (không chứa Foreign Keys)


CREATE TABLE Customer (
    customerID  NVARCHAR(20) PRIMARY KEY NOT NULL,
    name        NVARCHAR (255) NOT NULL,
    email       NVARCHAR (255) NULL,
    phoneNumber NVARCHAR (20) NOT NULL
);
CREATE TABLE Employee (
    employeeID NVARCHAR (20)PRIMARY KEY NOT NULL,
    firstName   NVARCHAR (255) NOT NULL,
    lastName    NVARCHAR (255) NOT NULL,
    role        NVARCHAR (255) NOT NULL,
    email       NVARCHAR (255) NOT NULL,
    phoneNumber NVARCHAR (20) NOT NULL
);

CREATE TABLE Tour (
    tourID      NVARCHAR (20) PRIMARY KEY NOT NULL,
    name        NVARCHAR (255) NOT NULL,
    picture     NVARCHAR (255) NULL,
    description NVARCHAR (MAX) NULL
);

CREATE TABLE Supplier (
    supplierID          NVARCHAR (20) PRIMARY KEY NOT NULL,
    name                NVARCHAR (255) NOT NULL,
    email               NVARCHAR (255) NULL,
    address             NVARCHAR (255) NULL,
    website             NVARCHAR (255) NULL,
    contactPerson       NVARCHAR (255) NULL,
    contactPersonPhone  NVARCHAR (20) NOT NULL,
    contactPersonEmail  NVARCHAR (255) NOT NULL
);

CREATE TABLE TourSupplier (
    tourID       NVARCHAR (20) NOT NULL,
    supplierID   NVARCHAR (20) NOT NULL,
    price        DECIMAL (10, 2) NOT NULL,
    startDay     DATE NOT NULL,
    endDay       DATE NOT NULL,
    description  NVARCHAR (MAX) NOT NULL,
    availability INT NOT NULL,
    totalSlots   INT NOT NULL,
    PRIMARY KEY (tourID, supplierID),
    FOREIGN KEY (tourID) REFERENCES Tour (tourID),
    FOREIGN KEY (supplierID) REFERENCES Supplier (supplierID)
);

--Tạo Function tự động tính tổng giá trị Booking

CREATE FUNCTION CalculateTotalPrice(
    @BookingID INT, 
    @TourID NVARCHAR (20), 
    @SupplierID NVARCHAR (20)
) RETURNS DECIMAL(10, 2) AS BEGIN
    DECLARE @TotalMultiplier DECIMAL(10, 2);
    SELECT @TotalMultiplier = ISNULL(SUM(multiplier), 0) FROM Member WHERE bookingID = @BookingID;
    RETURN @TotalMultiplier * ISNULL((SELECT price FROM TourSupplier WHERE tourID = @TourID AND supplierID = @SupplierID), 0);
END;

--Tạo Function tự động tính thời hạn thanh toán Booking

CREATE FUNCTION CalculatePaymentDeadline(
    @TourID NVARCHAR (20), 
    @SupplierID NVARCHAR (20)
) RETURNS DATE AS BEGIN
    DECLARE @StartDay DATE;
    SELECT @StartDay = startDay FROM TourSupplier WHERE tourID = @TourID AND supplierID = @SupplierID;
    RETURN DATEADD(DAY, -2, @StartDay);
END;

--Tạo các bảng giao dịch

CREATE TABLE Booking (
    bookingID       INT PRIMARY KEY NOT NULL,
    tourID          NVARCHAR (20) NOT NULL,
    supplierID      NVARCHAR (20) NOT NULL,
    date            DATE NULL,
    status          VARCHAR (50) DEFAULT 'Pending',
    totalPrice      AS dbo.CalculateTotalPrice(bookingID, tourID, supplierID),
    customerID      NVARCHAR (20) NULL,
    employeeID      NVARCHAR (20) NOT NULL,
    paid            DECIMAL (10, 2) NULL,
    fullyPaidDate   DATETIME NULL,
    note            NVARCHAR (4000) NULL,
    bookingTime     DATETIME NULL,
    FOREIGN KEY (tourID) REFERENCES Tour (tourID),
    FOREIGN KEY (supplierID) REFERENCES Supplier (supplierID),
    FOREIGN KEY (customerID) REFERENCES Customer (customerID),
    FOREIGN KEY (employeeID) REFERENCES Employee (employeeID),
    FOREIGN KEY (tourID, supplierID) REFERENCES TourSupplier (tourID, supplierID)
);

--Tạo trigger tự động cập nhật trạng thái Booking sau mỗi lần cập nhật Paid

CREATe TRIGGER [dbo].[UpdateStatusTrigger]
ON [dbo].[Booking]
AFTER UPDATE
AS
BEGIN
    UPDATE Booking
    SET status = 
        CASE
		    WHEN status = 'Success' THEN 'Success'
            WHEN fullyPaidDate IS NOT NULL THEN 'Waiting for Tickets'
            WHEN GETDATE() <= paymentDeadline THEN 'Pending'
            WHEN GETDATE() > paymentDeadline THEN 'Expired'
            ELSE 'outoftrack'
        END;
END;


CREATE TABLE Member (
    memberID   NVARCHAR (20) PRIMARY KEY NOT NULL,
    bookingID  INT NOT NULL,
    firstName  VARCHAR (50) NOT NULL,
    lastName   VARCHAR (50) NOT NULL,
    gender     INT CHECK (gender IN (0, 1)) NULL,
    DOB        DATE NULL,
    height     INT NOT NULL, 
    multiplier AS (
        CASE
            WHEN height > 130 THEN 1
            WHEN height >= 80 THEN 0.7
            WHEN height > 0 THEN 0
            ELSE 'Unidentified'
        END
    ),
    FOREIGN KEY (bookingID) REFERENCES Booking (bookingID)
);

--Tạo Trigger tự động update slots còn trống nếu status của Booking chuyển sang 'Success'


CREATE TRIGGER [dbo].[UpdateAvailabilityTrigger]
ON [dbo].[Booking]
AFTER UPDATE
AS
BEGIN
    IF UPDATE(status) AND EXISTS (SELECT 1 FROM inserted WHERE status = 'Success')
    BEGIN
        UPDATE TourSupplier
        SET availability = totalSlots- (
            SELECT COUNT(*) 
            FROM Member 
            WHERE bookingID IN (SELECT bookingID FROM inserted) AND height>=80
)
        WHERE tourID IN (SELECT tourID FROM inserted) and supplierID IN (SELECT supplierID FROM inserted);
    END
END;


CREATE TABLE Ticket (
    ticketID   NVARCHAR (20) PRIMARY KEY NOT NULL,
    issuedTime DATETIME DEFAULT GETDATE(),
    note NVARCHAR(400) NULL
  );

CREATE TABLE Payment (
    paymentID NVARCHAR (20) PRIMARY KEY NOT NULL,
    bookingID INT NOT NULL,
    amount FLOAT (53) NOT NULL,
    transactionTime DATETIME NOT NULL,
    method NVARCHAR (10) NOT NULL,
    FOREIGN KEY (bookingID) REFERENCES Booking (bookingID),
    CHECK (method='cash' OR method='banking')
);

--Tạo Trigger cập nhật lượng tiền đã thanh toán (paid) của bảng Booking sau mỗi Payment 

CREATE TRIGGER UpdatePaidTrigger
ON Payment AFTER INSERT, UPDATE AS BEGIN
    UPDATE Booking
    SET paid = ISNULL(
        (SELECT SUM(amount) 
         FROM Payment 
         WHERE bookingID IN (SELECT bookingID FROM inserted)),
        0
    )
    WHERE Booking.bookingID IN (SELECT bookingID FROM inserted);
END;

CREATE TABLE Refund (
    refundID                INT PRIMARY KEY NOT NULL,
    bookingID               INT NOT NULL,
    name                    VARCHAR (255) NOT NULL,
    method                  VARCHAR (50) NOT NULL,
    bankingNumber           VARCHAR (255) NULL,
    bankName                VARCHAR (255) NULL,
    status                  VARCHAR (50) NOT NULL,
    transactionConfirmation NVARCHAR (255) NOT NULL,

    FOREIGN KEY (bookingID) REFERENCES Booking (bookingID),
    CHECK (method='cash' OR method='banking')
);
